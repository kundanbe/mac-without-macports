diff --git a/src/gui/image/qpnghandler.cpp b/src/gui/image/qpnghandler.cpp
index b975807..eaf3719 100644
--- a/src/gui/image/qpnghandler.cpp
+++ b/src/gui/image/qpnghandler.cpp
@@ -49,6 +49,8 @@
 #include <png.h>
 #include <pngconf.h>
 
+void png_set_longjmp_fn() {}
+
 #ifdef Q_OS_WINCE
 #define CALLBACK_CALL_TYPE        __cdecl
 #else
@@ -268,7 +270,7 @@ void setup_qt(QImage& image, png_structp png_ptr, png_infop info_ptr, float scre
 
     if (color_type == PNG_COLOR_TYPE_GRAY) {
         // Black & White or 8-bit grayscale
-        if (bit_depth == 1 && info_ptr->channels == 1) {
+        if (bit_depth == 1 && 1 == png_get_channels( png_ptr, info_ptr ) ) {
             png_set_invert_mono(png_ptr);
             png_read_update_info(png_ptr, info_ptr);
             if (image.size() != QSize(width, height) || image.format() != QImage::Format_Mono) {
@@ -310,12 +312,15 @@ void setup_qt(QImage& image, png_structp png_ptr, png_infop info_ptr, float scre
                 image.setColor(i, qRgba(c,c,c,0xff));
             }
             if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
+/*
                 const int g = info_ptr->trans_values.gray;
                 if (g < ncols) {
                     image.setColor(g, 0);
                 }
+*/
             }
         }
+/*
     } else if (color_type == PNG_COLOR_TYPE_PALETTE
                && png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)
                && info_ptr->num_palette <= 256)
@@ -355,6 +360,7 @@ void setup_qt(QImage& image, png_structp png_ptr, png_infop info_ptr, float scre
            );
             i++;
         }
+*/
     } else {
         // 32-bit
         if (bit_depth == 16)
@@ -792,10 +798,12 @@ bool Q_INTERNAL_WIN_NO_THROW QPNGImageWriter::writeImage(const QImage& image_in,
 
     png_set_write_fn(png_ptr, (void*)this, qpiw_write_fn, qpiw_flush_fn);
 
+/*
     info_ptr->channels =
         (image.depth() == 32)
         ? (image.format() == QImage::Format_RGB32 ? 3 : 4)
         : 1;
+*/
 
     png_set_IHDR(png_ptr, info_ptr, image.width(), image.height(),
         image.depth() == 1 ? 1 : 8 /* per channel */,
@@ -807,9 +815,11 @@ bool Q_INTERNAL_WIN_NO_THROW QPNGImageWriter::writeImage(const QImage& image_in,
 
 
     //png_set_sBIT(png_ptr, info_ptr, 8);
+/*
     info_ptr->sig_bit.red = 8;
     info_ptr->sig_bit.green = 8;
     info_ptr->sig_bit.blue = 8;
+*/
 
     if (image.format() == QImage::Format_MonoLSB)
        png_set_packswap(png_ptr);
@@ -825,9 +835,11 @@ bool Q_INTERNAL_WIN_NO_THROW QPNGImageWriter::writeImage(const QImage& image_in,
         int num_trans = 0;
         for (int i=0; i<num_palette; i++) {
             QRgb rgb=image.color(i);
+/*
             info_ptr->palette[i].red = qRed(rgb);
             info_ptr->palette[i].green = qGreen(rgb);
             info_ptr->palette[i].blue = qBlue(rgb);
+*/
             trans[i] = rgb >> 24;
             if (trans[i] < 255) {
                 num_trans = i+1;
@@ -843,7 +855,9 @@ bool Q_INTERNAL_WIN_NO_THROW QPNGImageWriter::writeImage(const QImage& image_in,
     }
 
     if (image.format() != QImage::Format_RGB32) {
+/*
         info_ptr->sig_bit.alpha = 8;
+*/
     }
 
     // Swap ARGB to RGBA (normal PNG format) before saving on
@@ -1007,8 +1021,12 @@ QVariant QPngHandler::option(ImageOption option) const
         return d->quality;
     else if (option == Description)
         return d->description;
+/*
     else if (option == Size)
         return QSize(d->info_ptr->width, d->info_ptr->height);
+*/
+    else if (option == Size)
+        return QSize(0, 0);
     return 0;
 }
 
